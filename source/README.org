#+TITLE: dram {{{version}}}
#+STARTUP: indent
#+OPTIONS: ^:nil
#+OPTIONS: author:nil
#+OPTIONS: num:nil
#+PROPERTY: header-args :dir tangled
#+PROPERTY: header-args+ :mkdirp yes
#+PROPERTY: header-args:markdown :eval never
#+PROPERTY: header-args:org :eval never
#+PROPERTY: header-args:sh :exports both
#+PROPERTY: header-args:sh+ :post prefix-results(results=*this*)
#+PROPERTY: header-args:sh+ :prologue "PATH=$(cd ../.. && pwd):$PATH"
#+PROPERTY: header-args:sh+ :results raw
#+PROPERTY: header-args:sh+ :wrap example
#+MACRO: version (eval (progn (defvar dram-version "DEV") dram-version))

* Setup :noexport:
:PROPERTIES:
:ID:       54944074-2040-4250-8475-45827a054591
:END:

Prepend output indicator to Org mode results.

#+NAME: prefix-results
#+begin_src emacs-lisp :var results="line 1\nline 2\n" prefix="=>"
  ;; check for empty value to catch export errors
  (when noninteractive
    (when (or (and (stringp results) (string-empty-p results))
              (not results))
      (error "Empty code block result found")))

  ;; prepend prefix
  (cond ((stringp results)
         (replace-regexp-in-string "^\\(.\\)"
                                   (concat prefix " \\1")
                                   results))
        ((seqp results)
         (seq-map (lambda (x)
                    (cons prefix x))
                  results))
        (t results)))
#+end_src

#+RESULTS: prefix-results
: => line 1
: => line 2

Ensure that indentation is using spaces and not tabs. This works
around an issue with the ASCII export heading indentation.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

Set the export format for date and time stamps.

#+begin_src emacs-lisp
  (setq org-time-stamp-custom-formats '("(%F)" . "(%F %H:%M)"))
  (setq org-display-custom-times t)
#+end_src

Remove the box art which is written unconditionally by the ASCII exporter.

#+begin_src emacs-lisp
  (defun remove-ascii-export-box (s backend info)
    (if (eq backend 'ascii)
        (let ((utf8p (eq (plist-get info :ascii-charset) 'utf-8)))
          (replace-regexp-in-string "^" "  "
                                    (replace-regexp-in-string
                                     (if utf8p
                                         "^\\(└────\n\\|┌────\n\\|│ \\)"
                                       "^\\(`----\n\\|,----\n\\|| \\)") "" s)))
      s))

  (add-to-list 'org-export-filter-example-block-functions
               'remove-ascii-export-box)

  (add-to-list 'org-export-filter-src-block-functions
               'remove-ascii-export-box)
#+end_src

* Introduction

=dram= is a utility intended to export block content from plain-text
files. Given a source document such as this one:

#+begin_src markdown :tangle tangled/say_hello.md
# Say hello

## Set the message

```sh
msg=hello
```

## Output the message

```sh
echo $msg
```
#+end_src

=dram= can export the block content.

#+begin_src sh
  dram say_hello.md
#+end_src

#+RESULTS:
#+begin_example
=> msg=hello
=> echo $msg
#+end_example

Exported content is written to stdout. Code can easily be executed by
redirecting output to a file or piping it directly to a script
interpreter.

#+begin_src sh
  dram say_hello.md | /bin/sh
#+end_src

#+RESULTS:
#+begin_example
=> hello
#+end_example

The primary use case is to provide bootstrap functionality to
deployment or build systems by retrieving content from within
plain-text documentation.

=dram= only requires an AWK interpreter to run. The majority of
environments will already provide one.

The default configuration identifies block content based on the match
pattern commonly used by Markdown specifications: at least three
backticks at the beginning of a line.

Any trailing text which appears on the same line as the pattern match
which identified the block opening is referred to as the
"info-string". This can be pattern matched or word searched separately
as part of the block selection criteria.

* Building and installation
:PROPERTIES:
:header-args: :eval never
:END:

If building a development version rather than a release begin by
running the bootstrap script. This process requires that Autoconf and
Automake are installed.

#+begin_src sh
  ./bootstrap
#+end_src

To build referencing =gawk=, =mawk=, =nawk=, or =awk= as the AWK
interpreter, in that order of preference, run =configure= and then run
=make=.

#+begin_src sh
  ./configure
  make
#+end_src

To specify the AWK binary to use instead of using the automatic search
specify an interpreter path by setting the variable =AWK_INTERP= when
running =configure=.

#+begin_src sh
  ./configure AWK_INTERP=/usr/bin/nawk
  make
#+end_src

Additional targets are available for running tests, installing, and
uninstalling:

#+begin_src sh
  make check
  make install
  make uninstall
#+end_src

* Examples
** Selection based on block ordering

The simplest approach to extracting code blocks from a source document
is to do so based on the order in which they appear within the
document.

Given the following source document:

#+begin_src markdown :tangle tangled/three_blocks.md
# Heading

```
one
```

```
two
```

```
three
```
#+end_src

Output all block contents in the order they appear in the document by
specifying no arguments:

#+begin_src sh
  dram three_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> one
=> two
=> three
#+end_example

To select specific blocks use the =blocks= argument and specify the
target blocks based on the order in which they appear in the document.

#+begin_src sh
  dram blocks='2 3' three_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> two
=> three
#+end_example

For convenience the block selection can also be specified using commas
to separate the values.

#+begin_src sh
  dram blocks=2,3 three_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> two
=> three
#+end_example

Negative values wrap around and can be used to select blocks relative
to the end of the file rather than its beginning.

#+begin_src sh
  dram blocks=-1,-2,-3 three_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> three
=> two
=> one
#+end_example

The selection for block 0 is reserved for future use and does not
return a value. Any positive or negative value which is out of range
does not return a value.

#+begin_src sh
  dram blocks=-4,0,1,4 three_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> one
#+end_example

Strings representing a numeric range are expanded to become a sequence
of block numbers.

#+begin_src sh
  dram blocks=1-3,3-1 three_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> one
=> two
=> three
=> three
=> two
=> one
#+end_example

** Executing code

Since content from all blocks is written to stdout the easiest way to
execute any code stored in the the blocks is to pipe all output
directly into stdin of a script interpreter.

Given the follow source document:

#+begin_src markdown :tangle tangled/say_message.md
```sh
msg=hi
```

```sh
echo "${msg:=hello}"
```
#+end_src

The output of stdout when selecting both blocks is effectively a two
line shell script which can be piped into a shell script interpreter:

#+begin_src sh
  dram say_message.md | /bin/sh
#+end_src

#+RESULTS:
#+begin_example
=> hi
#+end_example

The same result can be achieved by writing the output to a file and
then executing or compiling it as a second stage:

#+begin_src sh :epilogue "rm /tmp/script"
  dram say_message.md >/tmp/script
  /bin/sh /tmp/script
#+end_src

#+RESULTS:
#+begin_example
=> hi
#+end_example

If logic of the code is spread over multiple blocks then the selection
criteria can be used to change the behaviour.

#+begin_src sh
  dram blocks=2 say_message.md | /bin/sh
#+end_src

#+RESULTS:
#+begin_example
=> hello
#+end_example

A simple way to modify behaviour of the code originating from a single
block is for it to optionally use the values of environment variables.

#+begin_src sh
  dram blocks=2 say_message.md | msg=goodbye /bin/sh
#+end_src

#+RESULTS:
#+begin_example
=> goodbye
#+end_example

** Selection based on info-string words

It is common for the opening character sequence for a code block to
include additional text. There is generally no fixed specification on
how such text should be formatted or what it should represent but the
most common usage is that the info-string consists of white-space
separated words, with the first word representing the language used
within the code block. Typically the language is only supplied as a
hint to apply syntax highlighting but also works nicely to select
blocks of scripted code and pass them to the relevant interpreter or
compiler.

Given the following source document:

#+begin_src markdown :tangle tangled/multi_language.md
```sh
echo hello
```

```sh
echo "${msg:=hello}"
```

```py python2 python3
from os import getenv
from sys import version_info
msg = getenv('msg', 'hello')
```

```py python2
for x in xrange(1, 4):
    print('%d: Python %d says %s' % (x, version_info.major, msg))
```

```py python3 latest
for x in range(1, 4):
    print('{0}: Python {1} says {2}'.format(x, version_info.major, msg))
```
#+end_src

Use the =words= argument to select only the blocks whose info-string
contains the supplied words.

#+begin_src sh
  dram words=sh multi_language.md | msg=goodbye /bin/sh
#+end_src

#+RESULTS:
#+begin_example
=> hello
=> goodbye
#+end_example

Specifying more than one word will provide additional filtering to the
selection. All the specified words must be present in the info-string
text for the result to be classed as a match; the order in which the
words are specified is not considered as part of the selection
criteria. Labelling the blocks with words which indicate the script
interpreter allows easy targeting for which blocks will be executed.

#+begin_src sh
  dram words='python2 py' multi_language.md | msg=goodbye python2
#+end_src

#+RESULTS:
#+begin_example
=> 1: Python 2 says goodbye
=> 2: Python 2 says goodbye
=> 3: Python 2 says goodbye
#+end_example

For convenience the word selection can also be specified using commas
to separate the values.

#+begin_src sh
  dram words='python3,py' multi_language.md | msg=goodbye python3
#+end_src

#+RESULTS:
#+begin_example
=> 1: Python 3 says goodbye
=> 2: Python 3 says goodbye
=> 3: Python 3 says goodbye
#+end_example

Note that the order of the blocks in the source document and selection
criteria are critical to result. In this instance the default ordering
infers that the third block acts as a potential header for the code in
the fourth and fifth blocks.

The following would be an error since the import statements required
by the fourth and fifth blocks haven't been passed to the interpreter.

#+begin_src sh :eval never
  # an error introduced by block selection
  dram words='python3 py latest' multi_language.md | msg=goodbye python3
#+end_src

Potential solutions to this problem could be to:
- remove "latest" from the words argument when running the program
- add "latest" to the info-string of the third block in the
  source document
- remove "latest" from the info-string of the fifth block in the
  source document
- remove the third block from the source document entirely and add the
  same content directly into the top of the two remaining python
  blocks

** Selection based on info-string pattern matching

Where selecting blocks based on an unordered word match will not be
specific enough, or where words may be confused as a language
identifier, a more specific block selection may be performed by
specifying a regular expression which must find a match within the
info-string text.

Given the following source document:

#+begin_src markdown :tangle tangled/tcl.md
```sh tcl
echo Opening the Tcl website...
xdg-open https://www.tcl-lang.org/
```

```tcl sh
puts "sh path is '[auto_execok sh]'"
```

``` tcl message
if {[catch {puts $::env(msg)}]} {
    puts hello
}
```
#+end_src

Use the =pattern= argument to specify the regular expression which
must match a portion of the info-string line. Note that leading and
trailing white-space of the info-string line is removed prior to the
comparison so the pattern itself doesn't have to accommodate leading
or trailing white-space characters.

#+begin_src sh
  dram pattern=^tcl tcl.md | msg=goodbye tclsh
#+end_src

#+RESULTS:
#+begin_example
=> sh path is '/usr/bin/sh'
=> goodbye
#+end_example

** Custom block definition length

By default the pattern match identifying the closing line of a block
is required to be equal in length to the pattern match which occurred
to open the block. This allows the same pattern plus additional
content to appear within the block whilst keeping it opening.

Given the following source document:

#+begin_src markdown :tangle tangled/symetrical_blocks.md
````
```
`````
one
`````
```
````

```
`````
two
`````
```
#+end_src

The default behaviour allows =blockdef= pattern matches of different
lengths to the match which opened the block to feature as block
content:

#+begin_src sh
  dram symetrical_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> ```
=> `````
=> one
=> `````
=> ```
=> `````
=> two
=> `````
#+end_example

If the block definition length check is ignored by setting
=ignoreblockdeflength= to 1 then the block may be closed early if the
same sequence occurs within the block. For an odd number of matches
the effect may be that leading and trailing lines which also match
block definition are stripped from the output. For an even number of
matches the effect may be the definition of multiple empty blocks and
so no output is produced.

#+begin_src sh
  dram ignoreblockdeflength=1 symetrical_blocks.md
#+end_src

#+RESULTS:
#+begin_example
=> one
#+end_example

** Custom block definition pattern

To facilitate matching block content for formats which are dissimilar
to Markdown the pattern used to match blocks may be customised. This
can be particularly useful where the pattern used to a close a block
differs from the pattern used to open the block.

Given the following source document:

#+begin_src org :tangle tangled/say_hello.org
,#+begin_src sh
echo hello
,#+end_src
#+end_src

Setting =blockdef= to a regular expression which incorporates a match
group allows the matching of the opening and closing of a block. Note
that where the match length may vary between the opening and closing
of the block the match length must also be ignored by setting
=ignoreblockdeflength= to 1.

#+begin_src sh
  dram blockdef='^#\\+(begin|end)_src' ignoreblockdeflength=1 say_hello.org | /bin/sh
#+end_src

#+RESULTS:
#+begin_example
=> hello
#+end_example

* Reference
** Optional variables (arguments)
:PROPERTIES:
:header-args: :eval never
:END:

Export behaviour maybe modified by setting these variables. These are
passed directly to the AWK interpreter and should precede any input
filenames which are specified if they are to be in-effect.

- blockdef :: The regular expression used to match the opening and
  closing line of a block.

  If not specified the default value is "^````*" which will match
  block specifications for common Markdown implementations.

  #+begin_src sh :eval never
    # exactly 3 backticks only
    dram blockdef=^``` $INPUT_FILE
  #+end_src

- ignoreblockdeflength :: Ignore the length of the pattern match which
  opened the block.

  By default the length of the pattern match which closes a block must
  match the length of the pattern match which was used to open that
  same block. Setting this variable to 1 will close the block on any
  line which matches the =blockdef= pattern irrespective of the match
  length. The default value is 0.

  #+begin_src sh :eval never
    # export Org mode source blocks
    dram blockdef='^#\\+(begin|end)_src' ignoreblockdeflength=1 $INPUT_FILE
  #+end_src

- blocks :: Define the output order.

  By default block content is output in the order that it appears in
  the source file. By specifying a space or comma separated list of
  block numbers or strings representing a numeric range the ordering
  may be modified.

  The value of 1 represents the first block. Negative values select
  from the end of the list; -1 represents the final block. 0 returns
  nothing and is reserved for future use.

  #+begin_src sh :eval never
    # get the content from the first and last block
    dram blocks=1,-1 $INPUT_FILE
  #+end_src

  A string representing a numeric range should take the form of
  =start-end=. Negative values for =start= or =end= are supported.

  #+begin_src sh :eval never
    # get the content from the first 3 blocks and last 3 blocks
    dram blocks=1-3,-3--1 $INPUT_FILE
  #+end_src

- words :: Words which must appear in the info-string text to qualify
  the block for selection.

  By default the block is selected irrespective of info-string
  contents. By specifying a space separated list of words only blocks
  whose info-string text contains all of the specified words will be
  exported. Note that the order of the words is not considered.

  #+begin_src sh :eval never
    # export shell source blocks only and pipe to interpreter
    dram words=sh $INPUT_FILE | /bin/sh
  #+end_src

- pattern :: A regular expression pattern which must match the
  info-string text to qualify the block for selection.

  By default the block is selected irrespective of info-string
  contents. By specifying a regular expression pattern only blocks
  whose info-string value contains a match will be exported. Note that
  leading and trailing white-space is trimmed from the info-string
  value before the match is checked.

  #+begin_src sh :eval never
    # export shell source blocks only and pipe to interpreter
    dram pattern=^sh $INPUT_FILE | /bin/sh
  #+end_src

- FS :: The standard AWK variable FS is used to split the info-string
  text into words.

** Processing order

The block selection process runs in the follow order:
- All blocks are read
- Blocks are selected based on the value of =blocks=
- Blocks are deselected if the trimmed info-string text does not
  contain a match for the regular expression specified as the value of
  =pattern=
- Blocks are deselected if the trimmed info-string text does not
  contain all of the words specified as the value of =words=

** Change log
:PROPERTIES:
:EXPORT_OPTIONS: title:nil toc:nil
:ID:       3594bd9a-59c7-4a83-98f5-2531257ead3c
:END:

*** Version 1.1 [2022-02-12]

- Add expansion of numeric ranges to block number processing

  As a convenience for specifying a sequence of block numbers, where
  the components of the blocks parameter appear to take the form of a
  numeric range this range is expanded.

  Following this change =blocks=1-3= is equivalent to =blocks=1,2,3=.

- Enable VPATH builds for documentation files

  Initially the build targets for the documentation were only
  functional when building within the source directory. The build
  process now adjusts its working directory and the license file is
  linked into position to enable VPATH builds for the README and
  ChangeLog files.

  This allows the "distcheck" target to run in VPATH builds.

- Switch tests to use Test Anything Protocol

  The included test scripts have been modified to produce output which
  should conform to version 12 of the Test Anything Protocol (TAP)
  Specification. The output of the test scripts is read by a TAP
  consumer supplied as part of GNU Automake. As part of this change
  the expected and observed outputs of each test are no longer written
  to disk and compared with the =diff= utility, instead these values
  are kept as strings and compared within the testing script. The
  observed output of the test is emitted from each test as a sequence
  of TAP diagnostic lines.

  Following these changes:

  - To view the observed output of every test as it runs modify the
    environment variable =TEST_LOG_DRIVER_FLAGS= to include the option
    "--comments".

    #+begin_src sh :eval never
      TEST_LOG_DRIVER_FLAGS=--comments make check
    #+end_src

  - Alternative TAP consumers can be used by spooling the test script
    output or the Automake test logs through them.

    #+begin_src sh :eval never
      tests/01-block_order.test | tappy
      find tests -name '*.log' -exec tappy '{}' \;
    #+end_src

  - Tests now pass when running on Windows with MSYS2 since there is
    no longer a potential conflict between line ending style on MSYS2
    utility output and the line ending style of files representing the
    correct result.

- Clarify the usage of commas in variable values

  The usage of commas to delimit the values of the =words= parameter
  was not explicitly stated. The documentation has been updated to
  confirm that this usage is valid and provide an example which uses
  this feature.

*** Version 1.0 [2021-08-20]

Initial release.

** Copyright and license

#+INCLUDE: "../LICENSE"
